{"version":3,"sources":["components/StyledComponents.js","components/Title.js","components/Form.js","components/App.js","serviceWorker.js","index.js"],"names":["StyledForm","styled","div","Heading","h1","TitleContainer","ErrorMessage","props","index","inputContainerHeight","input","theme","colors","extraDark","indigo","light","isSubmitPage","button","StyledTitle","span","active","activated","Title","value","page","changeActivePage","useState","setActivated","useEffect","onClick","event","console","log","withFormContextAndTheme","useInputs","registerInput","inputValues","useActiveIndex","activeIndex","changeActiveIndex","error","tagOptions","length","join","message","onSubmit","payload","name","placeholder","inputRef","required","onChange","url","type","options","tags","App","state","className","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.62ea4807.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\r\n/* Note: From Emotion documentation: https://emotion.sh/docs/styled#composing-dynamic-styles\r\nconst dynamicStyles = props =>\r\n  css`\r\n    color: ${props.checked ? 'black' : 'grey'};\r\n    background: ${props.checked ? 'linear-gradient(45deg, #FFC107 0%, #fff200 100%)' : '#f5f5f5'};\r\n  `\r\n*/\r\n\r\nexport const StyledForm = styled.div`\r\n  margin: 100px auto;\r\n  box-sizing: content-box;\r\n  width: 900px;\r\n  height: 500px;\r\n  border: 3px double hsl(0, 0%, 13%); \r\n  text-align: center;\r\n  perspective: 800px;\r\n  background: hsl(139, 50%, 75%);\r\n  &:after {\r\n    content: \" ðŸ¦„\";\r\n  }\r\n`\r\n\r\nexport const Heading = styled.h1`\r\n  margin: 50px 0 15px 0;\r\n  font-size: 1.875rem;\r\n`\r\n\r\nexport const TitleContainer = styled.div`\r\n  font-size: 1.5rem;\r\n  line-height: 1;\r\n  display: flex;\r\n  flex-flow: column nowrap;\r\n  align-items: center;\r\n`\r\nexport const ErrorMessage = styled.div`\r\n  margin: 0 auto 5px auto;\r\n  height: 20px;\r\n  line-height: 20px;\r\n  font-size: 1.125rem;\r\n  color: hsl(16, 100%, 40%);\r\n`\r\n\r\nexport const IconContainer = styled.div`\r\n  height: 40px;\r\n  width: 34px;\r\n  overflow: hidden;\r\n`\r\n\r\nexport const IconWrapper = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  flex-flow: column nowrap;\r\n  line-height: 40px;\r\n  transition: top 300ms ease-out;\r\n  top: ${props => 0 + props.index * -40}px;\r\n`\r\n\r\nexport const InputContainer = styled.div`\r\n  position: relative;\r\n  margin: 0 8px;\r\n  height: ${props => props.inputContainerHeight ? props.inputContainerHeight : '40'}px;\r\n  flex: 1;\r\n  display: flex;\r\n  flex-flow: column nowrap;\r\n`\r\n\r\nexport const StyledInput = styled.input`\r\n  width: 100%;\r\n  border: 1px solid #ced4da;\r\n  border-radius: 0.25rem;\r\n  padding: 0.375rem 0.75rem;\r\n  outline: none;\r\n  color: ${props => props.theme.colors.extraDark.indigo};\r\n  transition: border-color 0.15s ease-in-out;\r\n  &:focus {\r\n    border-color: ${props => props.theme.colors.light.indigo};\r\n    box-shadow: 0 0 0 0.2rem rgba(166, 0, 255, .25);\r\n  }\r\n`;\r\n\r\nexport const SubmitLabel = styled.div`\r\n  font-size: 1.125rem;\r\n  font-weight: 500;\r\n  &:before {\r\n    content: \"Submit\";\r\n    position: absolute;\r\n    top: 7px;\r\n    left: -34px;\r\n    transition: opacity 450ms ease-in-out, transform 450ms ease-in-out;\r\n    ${props => props.isSubmitPage ? `\r\n      opacity: 1;\r\n      visibility: visible;\r\n    ` : `\r\n      opacity: 0;\r\n      visibility: hidden;\r\n      transform: translateX(-60px);\r\n    `}\r\n  }\r\n`\r\n\r\nexport const NextButton = styled.button`\r\n  position: relative;\r\n  height: 40px;\r\n  width: 34px;\r\n  border: 1px black;\r\n  background: none;\r\n  outline: none;\r\n  transition: transform 300ms;\r\n  cursor: pointer;\r\n  ${props => `\r\n    ${props.isSubmitPage ? `\r\n      transform: rotate(-90deg);\r\n      pointer-events: none;\r\n    ` : `\r\n      &:hover {\r\n        background: hsl(0, 0%, 90%);\r\n        border-radius: 3px;\r\n        transition: background 300ms ease, transform 300ms;\r\n      }\r\n      &:active, &.active {\r\n        top: 2px;\r\n        background-color: hsl(0, 0%, 100%);\r\n        transition-property: none;\r\n      }\r\n    `}\r\n  `}\r\n`\r\n\r\nexport const NextButtonIcon = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  width: 2px;\r\n  height: 17px;\r\n  background: hsl(0, 0%, 20%);\r\n  &::before {\r\n    content: '';\r\n    position: absolute;\r\n    left: -3px;\r\n    bottom: 1px;\r\n    width: 6px;\r\n    height: 6px;\r\n    transform: rotate(45deg);\r\n    border-right: 2px solid;\r\n    border-bottom: 2px solid;\r\n    border-color: hsl(0, 0%, 20%);\r\n  }\r\n`","/** @jsx jsx */\r\nimport { useState, useEffect } from \"react\";\r\nimport { jsx } from \"@emotion/core\";\r\nimport styled from \"@emotion/styled\";\r\n\r\n//? Change this to a link element for accessibility?\r\nconst StyledTitle = styled.span`\r\n  margin: 5px 0;\r\n  text-transform: capitalize;\r\n  transition: all 600ms;\r\n  ${props => props.active ? `\r\n    color: hsl(279, 75%, 35%);\r\n  ` : props.activated ? `\r\n    color: hsl(279, 9%, 25%);\r\n    cursor: pointer;\r\n  ` : `\r\n    color: hsl(0, 100%, 99%);  \r\n    opacity: 0.5;\r\n  `}\r\n`;\r\n\r\nconst Title = ({ active, value, page, changeActivePage }) => {\r\n  const [activated, setActivated] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (active && !activated) {\r\n      setActivated(true);\r\n    }\r\n  }, [active, activated])\r\n\r\n  const handleClick = event => {\r\n    if (activated && !active) {\r\n      console.log('click!');\r\n      changeActivePage(page);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <StyledTitle active={active} activated={activated} onClick={handleClick}>\r\n      {value}\r\n    </StyledTitle>\r\n  )\r\n}\r\n\r\nexport default Title;","import React, { useState } from \"react\";\r\nimport {\r\n  useInputs,\r\n  useActiveIndex,\r\n  withFormContextAndTheme,\r\n  FormBody,\r\n  TextInput,\r\n  RadioControl,\r\n  RadioOption,\r\n  CheckboxMultiControl\r\n} from \"react-emotion-multi-step-form\";\r\n\r\nimport { StyledForm, Heading, TitleContainer, ErrorMessage } from \"./StyledComponents\";\r\nimport Title from \"./Title\";\r\n\r\n// import useInputs from '../hooks/useInputs';\r\n// import useActiveIndex from \"../hooks/useActiveIndex\";\r\n// import withFormContextAndTheme from \"./withFormContextAndTheme\";\r\n// import FormBody from \"./FormBody\";\r\n// import TextInput from \"./TextInput\";\r\n// import { RadioControl, RadioOption } from \"./RadioControl\";\r\n// import CheckboxMultiControl from \"./CheckboxMultiControl\";\r\n\r\n// If Form is re-rendered a lot, improve performance by memoizing child components that are large like so:\r\n// const MemoizedCheckboxMultiControl = React.memo(CheckboxMultiControl);\r\n\r\nconst Form = props => {\r\n  console.log('Form rendered!');\r\n  const { registerInput, inputValues } = useInputs();\r\n  const { activeIndex, changeActiveIndex, error } = useActiveIndex();\r\n  const [tagOptions, setTagOptions] = useState([ // fetch data in useEffect hook to update this state after initial render\r\n    ['suggestions', 'parent categories', 'syntax', 'fundamentals'],\r\n    [\r\n      [\r\n        'object',\r\n        'scope',\r\n        'execution context',\r\n        'closures',\r\n        'nodejs',\r\n        'es6',\r\n        'express',\r\n      ],\r\n      [\r\n        'asynchronous',\r\n        'execution context',\r\n        'syntax',\r\n        'context',\r\n        'fundamentals',\r\n        'object',\r\n        'object oriented programming',\r\n        'ES6',\r\n        'web browser',\r\n        'developer tools',\r\n        'best practice',\r\n      ],\r\n      [\r\n        'operators',\r\n        'control flow',\r\n        'data types',\r\n        'express',\r\n        'nodejs',\r\n      ],\r\n      [\r\n        'scope',\r\n        'error handling',\r\n        'asynchronous',\r\n        'closures',\r\n      ],\r\n    ]\r\n  ]);\r\n\r\n  const handleUrlChange = url => console.log(`handleUrlChange called with: ${url}`);\r\n  const handleTypeChange = type => console.log(`handleType called with: ${type}`);\r\n  const handleTagsChange = tags => console.log(`handleTags called with: ${tags}`);\r\n  const handleSubmit = payload => {\r\n    console.log('Form submitted with the form fields:');\r\n    console.log(payload);\r\n  };\r\n\r\n  return (\r\n    <StyledForm>\r\n      <Heading>Submit An Article To the Communal Curator</Heading>\r\n      <TitleContainer>\r\n        <Title\r\n          value={inputValues['url'] || 'Input Article URL'}\r\n          page={0}\r\n          active={activeIndex === 0}\r\n          changeActivePage={changeActiveIndex}\r\n        />\r\n        <Title\r\n          value={inputValues['type'] || 'Select Resource Type'}\r\n          page={1}\r\n          active={activeIndex === 1}\r\n          changeActivePage={changeActiveIndex}\r\n        />\r\n        <Title\r\n          value={((inputValues['tags'] && inputValues['tags'].length) && inputValues['tags'].join(', ')) || 'Select Article Tags'}\r\n          page={2}\r\n          active={activeIndex === 2}\r\n          changeActivePage={changeActiveIndex}\r\n        />\r\n      </TitleContainer>\r\n      <ErrorMessage>{error.message}</ErrorMessage>\r\n      <FormBody onSubmit={handleSubmit}>\r\n        <TextInput\r\n          name=\"url\"\r\n          placeholder='url'\r\n          inputRef={registerInput(\r\n            'icon-link',\r\n            {\r\n              required: 'Please fill in the URL!',\r\n            },\r\n          )}\r\n          onChange={handleUrlChange}\r\n        />\r\n        <RadioControl\r\n          name=\"type\"\r\n          inputRef={registerInput(\r\n            'icon-tree',\r\n            {\r\n              required: 'Please select a Type!',\r\n            },\r\n          )}\r\n          onChange={handleTypeChange}\r\n        >\r\n          <RadioOption value=\"guide\" />\r\n          <RadioOption value=\"tutorial\" />\r\n          <RadioOption value=\"reference\" />\r\n        </RadioControl>\r\n        <CheckboxMultiControl\r\n          name=\"tags\"\r\n          inputRef={registerInput(\r\n            'icon-price-tags',\r\n            {\r\n              required: 'Please select a Tag!',\r\n            },\r\n            220,\r\n          )}\r\n          options={tagOptions}\r\n          onChange={handleTagsChange}\r\n        />\r\n      </FormBody>\r\n    </StyledForm>\r\n  );\r\n}\r\n\r\nexport default withFormContextAndTheme(Form);","import React from \"react\";\r\n\r\nimport \"../fonts/icomoon/style.css\";\r\nimport Form from \"./Form\";\r\n\r\nclass App extends React.Component {\r\n  state = {};\r\n\r\n  componentDidMount() {\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Form />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}